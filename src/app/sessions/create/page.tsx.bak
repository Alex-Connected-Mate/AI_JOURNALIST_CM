'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useStore } from '@/lib/store';
import Button from '@/components/Button';
import Input from '@/components/Input';
import Checkbox from '@/components/Checkbox';
import Select from '@/components/Select';
import ColorPicker from '@/components/ColorPicker';
import EmojiPicker from '@/components/EmojiPicker';
import ImageSelector from '@/components/ImageSelector';
import NumberInput from '@/components/NumberInput';
import RadioGroup from '@/components/RadioGroup';
import Tabs from '@/components/Tabs';
import { createSession, uploadProfileImage } from '@/lib/supabase';
import { useSessionCreationLogger, SessionCreationAction } from '@/lib/sessionCreationLogger';
import TimerSettings from '@/components/TimerSettings';

interface SessionError {
  message: string;
}

// Fonction pour g√©n√©rer un ID anonyme bas√© sur un nom
const generateAnonymousId = (name: string) => {
  const cleanName = name.toLowerCase().replace(/[^a-z0-9]/g, '');
  const randomNum = Math.floor(Math.random() * 1000);
  return `${cleanName.substring(0, 3)}${randomNum}`;
};

// Options pour les modes de profil utilisateur
const userModeOptions = [
  { value: 'anonymous', label: 'Anonymous' },
  { value: 'semi-anonymous', label: 'Semi-Anonymous' },
  { value: 'non-anonymous', label: 'Non-Anonymous' },
];

const tabs = [
  { id: 'basic', label: 'Basic Information' },
  { id: 'appearance', label: 'Appearance' },
  { id: 'profile', label: 'User Profiles' },
  { id: 'ai', label: 'AI Configuration' }
];

export default function CreateSessionPage() {
  const router = useRouter();
  const { user, userProfile, createSession: storeCreateSession, startSessionCreation, updateSessionCreationField, setSessionCreationStep, finishSessionCreation } = useStore();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('basic');
  
  // Session form state
  const [sessionName, setSessionName] = useState<string>('');
  const [institution, setInstitution] = useState<string>('');
  const [professorName, setProfessorName] = useState<string>('');
  const [showProfessorName, setShowProfessorName] = useState<boolean>(true);
  const [selectedImage, setSelectedImage] = useState<string>('university');
  const [profileMode, setProfileMode] = useState<'anonymous' | 'semi-anonymous' | 'non-anonymous'>('anonymous');
  const [color, setColor] = useState<string>('#3490dc');
  const [emoji, setEmoji] = useState<string>('üéì');
  const [maxParticipants, setMaxParticipants] = useState<number>(50);
  const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null);
  
  // √âtats pour le contr√¥le de l'utilisation des informations du profil
  const [useProfileInstitution, setUseProfileInstitution] = useState<boolean>(true);
  const [useProfileName, setUseProfileName] = useState<boolean>(true);
  
  // Add new state for images and timer
  const [useProfileAvatar, setUseProfileAvatar] = useState<boolean>(false);
  const [companyLogo, setCompanyLogo] = useState<string | null>(null);
  const [timerEnabled, setTimerEnabled] = useState<boolean>(true);
  const [timerDuration, setTimerDuration] = useState<number>(5);
  
  // Initialize session creation logger in store
  useEffect(() => {
    // D√©marrer le logging de cr√©ation de session
    startSessionCreation();
    console.log('üìù [SESSION_CREATION] Page loaded and logging initialized');
  }, [startSessionCreation]);

  useEffect(() => {
    // If user is not logged in, redirect to login page
    if (!user) {
      router.push('/auth/login');
    }
  }, [user, router]);

  // Initialiser avec les donn√©es de profil si disponibles
  useEffect(() => {
    if (userProfile) {
      console.log('üìù [SESSION_CREATION] User profile available, initializing fields');
      
      // Utiliser le nom de l'institution du profil
      if (userProfile.institution && useProfileInstitution) {
        setInstitution(userProfile.institution);
        updateSessionCreationField('institution', userProfile.institution, 'profile');
      }
      
      // Utiliser le nom complet du profil
      if (userProfile.full_name && useProfileName) {
        setProfessorName(userProfile.full_name);
        updateSessionCreationField('professorName', userProfile.full_name, 'profile');
      }
    }
  }, [userProfile, useProfileInstitution, useProfileName, updateSessionCreationField]);
  
  // Log tab changes
  useEffect(() => {
    setSessionCreationStep(activeTab);
  }, [activeTab, setSessionCreationStep]);
  
  const handleTabChange = (tabId: string) => {
    console.log(`üìù [SESSION_CREATION] Tab changed to ${tabId}`);
    setActiveTab(tabId);
  };
  
  // Helper function for field updates with logging
  const updateField = (field: string, value: any, source: 'user' | 'profile' | 'default' | 'template' = 'user') => {
    console.log(`üìù [SESSION_CREATION] Field ${field} updated to:`, value);
    updateSessionCreationField(field, value, source);
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user) {
      const errorMsg = 'You must be logged in to create a session';
      setError(errorMsg);
      console.error(`‚ùå [SESSION_CREATION] Submit failed: ${errorMsg}`);
      return;
    }
    
    if (!sessionName || !institution) {
      const errorMsg = 'Session name and institution are required';
      setError(errorMsg);
      console.error(`‚ùå [SESSION_CREATION] Submit validation failed: ${errorMsg}`);
      updateSessionCreationField('validation_error', { 
        fields: { 
          sessionName: !sessionName, 
          institution: !institution 
        },
        message: errorMsg
      });
      return;
    }
    
    setLoading(true);
    setError(null);
    console.log('üìù [SESSION_CREATION] Starting session creation API call');
    
    try {
      const sessionData = {
        user_id: user.id,
        name: sessionName,
        title: sessionName,
        institution,
        professor_name: professorName,
        show_professor_name: showProfessorName,
        image: uploadedImageUrl || selectedImage,
        company_logo: companyLogo,
        use_profile_avatar: useProfileAvatar,
        settings: {
          maxParticipants,
          institution,
          professorName,
          showProfessorName,
          connection: {
            anonymityLevel: profileMode,
            color,
            emoji,
          },
          ai_configuration: {
            model: "gpt-4",
            temperature: 0.7,
            max_tokens: 2000,
            presence_penalty: 0,
            frequency_penalty: 0,
            custom_instructions: null,
            timerEnabled,
            timerDuration
          }
        }
      };
      
      console.log('üìù [SESSION_CREATION] Session data being sent:', sessionData);
      
      const { data, error: apiError } = await storeCreateSession(sessionData);
      
      if (apiError) {
        const sessionError = apiError as SessionError;
        setError(sessionError.message);
        setLoading(false);
        console.error(`‚ùå [SESSION_CREATION] API error:`, sessionError);
        finishSessionCreation(false);
        return;
      }
      
      console.log('‚úÖ [SESSION_CREATION] Session created successfully:', data);
      
      // Mark session creation as completed with success
      finishSessionCreation(true, data?.id);
      
      // Redirect to dashboard
      router.push('/dashboard');
    } catch (err) {
      const errorMsg = 'An unexpected error occurred';
      setError(errorMsg);
      setLoading(false);
      console.error(`‚ùå [SESSION_CREATION] Unexpected error:`, err);
      finishSessionCreation(false);
    }
  };
  
  const handleImageChange = async (value: string | null) => {
    // Si c'est null, revenir √† la valeur par d√©faut
    if (!value) {
      setSelectedImage('university');
      updateField('image', 'university', 'default');
      console.log('üìù [SESSION_CREATION] Image reset to default: university');
      return;
    }
    
    // Si c'est une URL compl√®te (image t√©l√©charg√©e), pr√©server cette information
    if (value.startsWith('http')) {
      setUploadedImageUrl(value);
      console.log('üìù [SESSION_CREATION] Custom image URL set:', value);
      updateField('uploadedImageUrl', value);
    }
    
    setSelectedImage(value);
    updateField('selectedImage', value);
    console.log('üìù [SESSION_CREATION] Image selection changed to:', value);
  };
  
  const handleColorChange = (newColor: string) => {
    setColor(newColor);
    updateField('color', newColor);
    console.log('üìù [SESSION_CREATION] Color updated to:', newColor);
  };
  
  const handleEmojiChange = (newEmoji: string) => {
    setEmoji(newEmoji);
    updateField('emoji', newEmoji);
    console.log('üìù [SESSION_CREATION] Emoji updated to:', newEmoji);
  };
  
  const handleSessionNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSessionName(value);
    updateField('sessionName', value);
  };
  
  const handleInstitutionChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setInstitution(value);
    setUseProfileInstitution(false);
    updateField('institution', value);
    updateField('useProfileInstitution', false);
  };
  
  const handleProfessorNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setProfessorName(value);
    setUseProfileName(false);
    updateField('professorName', value);
    updateField('useProfileName', false);
  };
  
  const handleUseProfileInstitution = (checked: boolean) => {
    setUseProfileInstitution(checked);
    updateField('useProfileInstitution', checked);
    
    if (checked && userProfile?.institution) {
      setInstitution(userProfile.institution);
      updateField('institution', userProfile.institution, 'profile');
    }
  };
  
  const handleUseProfileName = (checked: boolean) => {
    setUseProfileName(checked);
    updateField('useProfileName', checked);
    
    if (checked && userProfile?.full_name) {
      setProfessorName(userProfile.full_name);
      updateField('professorName', userProfile.full_name, 'profile');
    }
  };
  
  const handleProfileModeChange = (value: string) => {
    setProfileMode(value as 'anonymous' | 'semi-anonymous' | 'non-anonymous');
    updateField('profileMode', value);
  };
  
  const handleMaxParticipantsChange = (value: number) => {
    setMaxParticipants(value);
    updateField('maxParticipants', value);
  };
  
  const handleShowProfessorNameChange = (checked: boolean) => {
    setShowProfessorName(checked);
    updateField('showProfessorName', checked);
  };
  
  const handleCompanyLogoChange = async (value: string | null) => {
    setCompanyLogo(value);
    updateField('companyLogo', value);
    console.log('üìù [SESSION_CREATION] Company logo changed to:', value);
  };
  
  const handleUseProfileAvatarChange = (use: boolean) => {
    setUseProfileAvatar(use);
    updateField('useProfileAvatar', use);
    console.log('üìù [SESSION_CREATION] Use profile avatar changed to:', use);
  };
  
  const handleTimerEnabledChange = (enabled: boolean) => {
    setTimerEnabled(enabled);
    updateField('timerEnabled', enabled);
    console.log('üìù [SESSION_CREATION] Timer enabled changed to:', enabled);
  };
  
  const handleTimerDurationChange = (duration: number) => {
    setTimerDuration(duration);
    updateField('timerDuration', duration);
    console.log('üìù [SESSION_CREATION] Timer duration changed to:', duration);
  };
  
  // Sample preview data based on current form values
  const previewData = {
    sessionName: sessionName || 'Session Name',
    institution: institution || 'Institution Name',
    professorName: showProfessorName ? (professorName || 'Professor Name') : '',
    image: selectedImage,
    companyLogo,
    useProfileAvatar,
    userAvatarUrl: userProfile?.avatar_url,
    profileMode,
    color,
    emoji,
    anonymousId: generateAnonymousId(professorName || 'Professor'),
    timerEnabled,
    timerDuration
  };
  
  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
          <h1 className="text-2xl font-bold text-gray-900">Create New Session</h1>
        </div>
      </header>
      
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <form onSubmit={handleSubmit}>
          <div className="px-4 py-6 sm:px-0">
            <div className="flex flex-col lg:flex-row gap-8">
              {/* Left Column - Form */}
              <div className="w-full lg:w-1/2 bg-white p-6 rounded-lg shadow">
                <Tabs
                  tabs={tabs}
                  activeTab={activeTab}
                  onChange={handleTabChange}
                  className="mb-6"
                />
                
                {/* Basic Information Tab */}
                {activeTab === 'basic' && (
                  <div className="space-y-4">
                    <Input
                      label="Session Name"
                      value={sessionName}
                      onChange={handleSessionNameChange}
                      placeholder="Enter session name"
                      required
                    />
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <Input
                          label="Institution/Program Name"
                          value={institution}
                          onChange={handleInstitutionChange}
                          placeholder="Enter institution or program name"
                          required
                        />
                        {userProfile?.institution && (
                          <div className="ml-4 flex items-center">
                            <Checkbox
                              label="Utiliser mon institution"
                              checked={useProfileInstitution}
                              onChange={handleUseProfileInstitution}
                            />
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <Input
                          label="Professor Name"
                          value={professorName}
                          onChange={handleProfessorNameChange}
                          placeholder="Enter your name"
                        />
                        {userProfile?.full_name && (
                          <div className="ml-4 flex items-center">
                            <Checkbox
                              label="Utiliser mon nom"
                              checked={useProfileName}
                              onChange={handleUseProfileName}
                            />
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <Checkbox
                      label="Show professor name on session"
                      checked={showProfessorName}
                      onChange={handleShowProfessorNameChange}
                    />
                    
                    <NumberInput
                      label="Maximum Participants"
                      value={maxParticipants}
                      onChange={handleMaxParticipantsChange}
                      min={1}
                      max={500}
                    />
                  </div>
                )}
                
                {/* Appearance Tab */}
                {activeTab === 'appearance' && (
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Images de session
                      </label>
                      
                      {/* Add profile avatar option */}
                      <ImageSelector
                        label="Avatar du professeur"
                        selectedImageId={selectedImage}
                        onChange={handleImageChange}
                        userAvatarUrl={userProfile?.avatar_url || null}
                        useUserAvatar={useProfileAvatar}
                        onUseUserAvatarChange={handleUseProfileAvatarChange}
                        onFileUpload={async (file) => {
                          try {
                            setLoading(true);
                            const { url, error } = await uploadProfileImage(user?.id || '', file);
                            if (error) {
                              throw error;
                            }
                            setLoading(false);
                            return url;
                          } catch (err) {
                            console.error('üìù [SESSION_CREATION] Error uploading image:', err);
                            setLoading(false);
                            return null;
                          }
                        }}
                      />
                      
                      {/* Add company logo option */}
                      <div className="mt-6">
                        <ImageSelector
                          label="Logo d'entreprise/programme"
                          selectedImageId={companyLogo}
                          onChange={handleCompanyLogoChange}
                          onFileUpload={async (file) => {
                            try {
                              setLoading(true);
                              const { url, error } = await uploadProfileImage(user?.id || '', file);
                              if (error) {
                                throw error;
                              }
                              setLoading(false);
                              return url;
                            } catch (err) {
                              console.error('üìù [SESSION_CREATION] Error uploading image:', err);
                              setLoading(false);
                              return null;
                            }
                          }}
                          helpText="Logo de l'entreprise ou du programme √† afficher dans la session"
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Theme Color
                      </label>
                      <ColorPicker
                        label="Theme Color"
                        selectedColor={color}
                        onChange={handleColorChange}
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Session Emoji
                      </label>
                      <EmojiPicker
                        label="Session Emoji"
                        selectedEmoji={emoji}
                        onChange={handleEmojiChange}
                      />
                    </div>
                  </div>
                )}
                
                {activeTab === 'profile' && (
                  <div className="space-y-4">
                    <RadioGroup
                      label="User Profile Mode"
                      name="profileMode"
                      options={userModeOptions}
                      value={profileMode}
                      onChange={handleProfileModeChange}
                    />
                    
                    {profileMode === 'semi-anonymous' && (
                      <div className="p-4 bg-gray-50 rounded-md border border-gray-200">
                        <h3 className="text-sm font-medium text-gray-700 mb-3">
                          Semi-anonymous Mode Options
                        </h3>
                        <p className="text-sm text-gray-500 mb-2">
                          Participants will be able to:
                        </p>
                        <ul className="list-disc pl-5 text-sm text-gray-600 space-y-1">
                          <li>Enter a nickname</li>
                          <li>Select an emoji from a predefined list</li>
                          <li>Optionally upload a profile photo</li>
                        </ul>
                      </div>
                    )}
                    
                    {profileMode === 'non-anonymous' && (
                      <div className="p-4 bg-gray-50 rounded-md border border-gray-200">
                        <h3 className="text-sm font-medium text-gray-700 mb-3">
                          Non-anonymous Mode Options
                        </h3>
                        <p className="text-sm text-gray-500 mb-2">
                          Participants will use their real profiles, including:
                        </p>
                        <ul className="list-disc pl-5 text-sm text-gray-600 space-y-1">
                          <li>Real name from their account</li>
                          <li>Profile picture from their account</li>
                          <li>Institution information</li>
                        </ul>
                      </div>
                    )}
                  </div>
                )}
                
                {/* AI Configuration Tab */}
                {activeTab === 'ai' && (
                  <div className="space-y-6">
                    <TimerSettings
                      timerEnabled={timerEnabled}
                      timerDuration={timerDuration}
                      onTimerEnabledChange={handleTimerEnabledChange}
                      onTimerDurationChange={handleTimerDurationChange}
                    />
                    
                    <div className="bg-gray-50 p-4 rounded-md border border-gray-200 mt-6">
                      <h3 className="text-sm font-medium text-gray-700 mb-2">
                        Configuration des agents IA
                      </h3>
                      <p className="text-sm text-gray-500">
                        Les param√®tres des agents IA d√©terminent la fa√ßon dont les participants 
                        interagiront avec l'IA durant la session.
                      </p>
                    </div>
                  </div>
                )}
                
                {error && (
                  <div className="mt-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative">
                    {error}
                  </div>
                )}
                
                <div className="mt-6 flex justify-between">
                  <Button
                    variant="outline"
                    type="button"
                    onClick={() => {
                      updateField('navigation', 'cancel');
                      router.push('/dashboard');
                    }}
                  >
                    Cancel
                  </Button>
                  
                  <Button
                    type="submit"
                    isLoading={loading}
                  >
                    Create Session
                  </Button>
                </div>
              </div>
              
              {/* Right Column - Preview */}
              <div className="w-full lg:w-1/2 bg-white p-6 rounded-lg shadow">
                <div className="border-b border-gray-200 pb-4 mb-4">
                  <h2 className="text-lg font-medium text-gray-900">Live Preview</h2>
                  <p className="text-sm text-gray-500">
                    See how your session will appear to participants
                  </p>
                </div>
                
                <div className="rounded-lg border border-gray-200 overflow-hidden">
                  {/* Session Header */}
                  <div 
                    className="p-6 text-white" 
                    style={{ backgroundColor: previewData.color }}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="text-2xl font-bold">{previewData.sessionName}</h3>
                        <p className="text-lg opacity-90">{previewData.institution}</p>
                        {previewData.professorName && (
                          <p className="text-sm opacity-80 mt-1">
                            by {previewData.professorName}
                          </p>
                        )}
                      </div>
                      
                      <div className="text-4xl">{previewData.emoji}</div>
                    </div>
                  </div>
                  
                  {/* Images Preview */}
                  {(previewData.useProfileAvatar || previewData.companyLogo) && (
                    <div className="px-6 pt-4">
                      <h4 className="text-sm font-medium text-gray-500 mb-2">
                        Images
                      </h4>
                      <div className="flex items-center space-x-4">
                        {previewData.useProfileAvatar && previewData.userAvatarUrl && (
                          <div>
                            <p className="text-xs text-gray-500 mb-1">Avatar du professeur</p>
                            <img 
                              src={previewData.userAvatarUrl} 
                              alt="Avatar" 
                              className="h-12 w-12 rounded-full object-cover"
                            />
                          </div>
                        )}
                        
                        {previewData.companyLogo && (
                          <div>
                            <p className="text-xs text-gray-500 mb-1">Logo</p>
                            <img 
                              src={previewData.companyLogo} 
                              alt="Logo" 
                              className="h-12 object-contain"
                            />
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {/* Timer Preview */}
                  <div className="px-6 py-4">
                    <h4 className="text-sm font-medium text-gray-500 mb-2">
                      Configuration IA
                    </h4>
                    <div className="bg-gray-50 border border-gray-200 rounded-md p-3">
                      <p className="text-sm">
                        <span className="font-medium">Timer: </span>
                        {previewData.timerEnabled 
                          ? `${previewData.timerDuration} minute${previewData.timerDuration > 1 ? 's' : ''}` 
                          : 'D√©sactiv√©'}
                      </p>
                    </div>
                  </div>
                  
                  {/* Existing User Profile Preview - keep this part */}
                </div>
              </div>
            </div>
          </div>
        </form>
      </main>
    </div>
  );
} 