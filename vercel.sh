#!/bin/bash

# Banni√®re d'introduction
echo "üöÄ D√©marrage des op√©rations de pr√©-d√©ploiement..."
echo "==============================================="

# V√©rifier si nous sommes dans l'environnement Vercel
IS_VERCEL=${VERCEL:-false}
echo "üìå Environnement Vercel: $IS_VERCEL"

# R√©cup√©ration du dossier parent du script actuel
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
echo "üìÇ Dossier du script: $SCRIPT_DIR"

# V√©rification des dossiers critiques requis
if [ ! -d "$SCRIPT_DIR/scripts" ]; then
  echo "üîß Cr√©ation du dossier scripts manquant..."
  mkdir -p "$SCRIPT_DIR/scripts"
fi

# 1. R√©solution des conflits Git
echo "üîç V√©rification des conflits Git..."

# V√©rifier si le script fix-git-conflicts.js existe
if [ -f "$SCRIPT_DIR/scripts/fix-git-conflicts.js" ]; then
  echo "‚úÖ Utilisation du script fix-git-conflicts.js existant"
  node "$SCRIPT_DIR/scripts/fix-git-conflicts.js"
else
  echo "‚ö†Ô∏è Script fix-git-conflicts.js non trouv√©, cr√©ation d'un script minimal..."
  
  # Cr√©ation d'un script minimal de r√©solution de conflits
  cat > "$SCRIPT_DIR/scripts/fix-git-conflicts.js" << 'EOL'
#!/usr/bin/env node
/**
 * Script minimal pour r√©soudre les conflits Git
 */
const fs = require('fs');
const path = require('path');
const execSync = require('child_process').execSync;

// Fonction pour v√©rifier si un fichier contient des marqueurs de conflit
function checkForConflicts(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return content.includes('<<<<<<<') && 
           content.includes('=======') && 
           content.includes('>>>>>>>');
  } catch (error) {
    return false;
  }
}

// Fonction de r√©solution simple: garder la version HEAD (apr√®s ======)
function resolveConflict(filePath) {
  try {
    console.log(`R√©solution des conflits dans: ${filePath}`);
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Cr√©er une sauvegarde
    fs.writeFileSync(`${filePath}.conflict-backup`, content);
    
    // R√©soudre les conflits en gardant la version la plus r√©cente (apr√®s =======)
    let newContent = '';
    let inConflict = false;
    let keepCurrentLine = false;
    
    const lines = content.split('\n');
    for (const line of lines) {
      if (line.startsWith('<<<<<<<')) {
        inConflict = true;
        keepCurrentLine = false;
        continue;
      }
      
      if (line.startsWith('=======')) {
        keepCurrentLine = true;
        continue;
      }
      
      if (line.startsWith('>>>>>>>')) {
        inConflict = false;
        keepCurrentLine = false;
        continue;
      }
      
      if (!inConflict || keepCurrentLine) {
        newContent += line + '\n';
      }
    }
    
    fs.writeFileSync(filePath, newContent);
    console.log(`‚úÖ Conflits r√©solus dans: ${filePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©solution des conflits dans ${filePath}: ${error.message}`);
    return false;
  }
}

// Chercher les fichiers avec des conflits
console.log('üîé Recherche de fichiers avec des conflits Git...');

// Liste des fichiers connus pour avoir des conflits
const knownConflictFiles = [
  'src/lib/supabase.ts'
];

let filesFixed = 0;

// V√©rifier et r√©soudre les conflits dans les fichiers connus
for (const filePath of knownConflictFiles) {
  const fullPath = path.join(process.cwd(), filePath);
  
  if (fs.existsSync(fullPath) && checkForConflicts(fullPath)) {
    if (resolveConflict(fullPath)) {
      filesFixed++;
    }
  }
}

console.log(`üèÅ R√©solution de conflits termin√©e: ${filesFixed} fichiers corrig√©s.`);
EOL

  chmod +x "$SCRIPT_DIR/scripts/fix-git-conflicts.js"
  node "$SCRIPT_DIR/scripts/fix-git-conflicts.js"
fi

# 2. V√©rification du middleware 
echo "üîç V√©rification des fichiers middleware..."

# Chercher les fichiers middleware dupliqu√©s
MIDDLEWARE_FILES=( $(find "$SCRIPT_DIR/src" -name "middleware.*" -type f) )
if [ ${#MIDDLEWARE_FILES[@]} -gt 1 ]; then
  echo "‚ö†Ô∏è Plusieurs fichiers middleware d√©tect√©s, nettoyage n√©cessaire!"
  
  # Garder uniquement le fichier middleware √† la racine
  ROOT_MIDDLEWARE=""
  for file in "${MIDDLEWARE_FILES[@]}"; do
    dirname=$(dirname "$file")
    if [ "$dirname" == "$SCRIPT_DIR/src" ]; then
      ROOT_MIDDLEWARE="$file"
    fi
  done
  
  if [ -n "$ROOT_MIDDLEWARE" ]; then
    echo "‚ÑπÔ∏è Conservation du middleware racine: $ROOT_MIDDLEWARE"
    
    # Supprimer les autres middlewares
    for file in "${MIDDLEWARE_FILES[@]}"; do
      if [ "$file" != "$ROOT_MIDDLEWARE" ]; then
        echo "üóëÔ∏è Suppression du middleware dupliqu√©: $file"
        rm "$file"
      fi
    done
  else
    echo "‚ö†Ô∏è Aucun middleware racine trouv√©, d√©placement d'un fichier existant..."
    
    # D√©placer le premier middleware trouv√© √† la racine
    FIRST_MIDDLEWARE="${MIDDLEWARE_FILES[0]}"
    filename=$(basename "$FIRST_MIDDLEWARE")
    cp "$FIRST_MIDDLEWARE" "$SCRIPT_DIR/src/$filename"
    echo "üìã Middleware copi√© √† la racine: $SCRIPT_DIR/src/$filename"
    
    # Supprimer les autres middlewares
    for file in "${MIDDLEWARE_FILES[@]}"; do
      if [ "$file" != "$SCRIPT_DIR/src/$filename" ]; then
        echo "üóëÔ∏è Suppression: $file"
        rm "$file"
      fi
    done
  fi
fi

# 3. Ex√©cution des v√©rifications pr√©-d√©ploiement
echo "üß™ Ex√©cution des v√©rifications pr√©-d√©ploiement..."

if [ -f "$SCRIPT_DIR/scripts/pre-deploy-check.js" ]; then
  echo "‚úÖ Ex√©cution de pre-deploy-check.js..."
  node "$SCRIPT_DIR/scripts/pre-deploy-check.js"
else
  echo "‚ö†Ô∏è Script pre-deploy-check.js non trouv√©, v√©rifications minimales..."
  
  # V√©rification simplifi√©e sans le script
  echo "‚ÑπÔ∏è V√©rification des conflits Git avec grep..."
  CONFLICTS=$(grep -r "<<<<<" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" "$SCRIPT_DIR/src" || true)
  if [ -n "$CONFLICTS" ]; then
    echo "‚ö†Ô∏è Des conflits Git non r√©solus ont √©t√© d√©tect√©s!"
    echo "$CONFLICTS"
  else
    echo "‚úÖ Pas de conflits Git non r√©solus d√©tect√©s."
  fi
fi

# 4. Validation des variables d'environnement
echo "üîê Validation des variables Supabase..."

# V√©rification de la pr√©sence des variables Supabase
if [ -n "$NEXT_PUBLIC_SUPABASE_URL" ] && [ -n "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]; then
  echo "‚úÖ Variables Supabase configur√©es"
else
  echo "‚ö†Ô∏è Variables Supabase manquantes!"
  if [ "$IS_VERCEL" = "1" ]; then
    echo "‚ùå ERREUR CRITIQUE: Les variables Supabase sont requises pour le d√©ploiement!"
  fi
fi

# 5. Correction du fichier test-toast.jsx
echo "üîß V√©rification de test-toast.jsx..."

# Utiliser le script simplifi√©
if [ -f "$SCRIPT_DIR/scripts/fix-test-toast-simple.js" ]; then
  echo "‚úÖ Utilisation du script fix-test-toast-simple.js existant"
  node "$SCRIPT_DIR/scripts/fix-test-toast-simple.js"
else
  echo "‚ö†Ô∏è Script fix-test-toast-simple.js non trouv√©!"
fi

# 6. Correction des modules JS
echo "üîß Conversion des modules ES vers CommonJS..."

# Utiliser notre script fix-js-modules-simple.js
if [ -f "$SCRIPT_DIR/scripts/fix-js-modules-simple.js" ]; then
  echo "‚úÖ Utilisation du script fix-js-modules-simple.js existant"
  node "$SCRIPT_DIR/scripts/fix-js-modules-simple.js"
else
  echo "‚ö†Ô∏è Script fix-js-modules-simple.js non trouv√©!"
fi

# 7. Finalisation et message de r√©capitulation
echo "üèÅ Pr√©paration de d√©ploiement termin√©e!"
echo "==============================================="
echo "‚úÖ Conflits Git v√©rifi√©s et r√©solus"
echo "‚úÖ Middlewares d√©dupliqu√©s"
echo "‚úÖ Variables d'environnement valid√©es"
echo "‚úÖ Conversions de syntaxe ES modules effectu√©es"
echo "üöÄ Pr√™t pour le d√©ploiement!"

exit 0 