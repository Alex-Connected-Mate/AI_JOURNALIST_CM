#!/usr/bin/env node
/**
 * Script de v√©rification avant d√©ploiement
 * Ex√©cut√© automatiquement avant le build sur Vercel
 * pour s'assurer que la configuration est correcte
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

console.log(`${colors.cyan}üîç Ex√©cution des v√©rifications pr√©-d√©ploiement...${colors.reset}`);

let hasErrors = false;
let warnings = 0;

// V√©rifier les variables d'environnement requises
function checkEnvironmentVariables() {
  console.log(`${colors.blue}üîç V√©rification des variables d'environnement...${colors.reset}`);
  
  const requiredVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY'
  ];
  
  for (const varName of requiredVars) {
    if (!process.env[varName]) {
      console.warn(`${colors.yellow}‚ö†Ô∏è Variable d'environnement manquante: ${varName}${colors.reset}`);
      warnings++;
    } else {
      console.log(`${colors.green}‚úÖ Variable pr√©sente: ${varName}${colors.reset}`);
    }
  }
}

// V√©rifier s'il y a des fichiers middleware en double
function checkMiddlewareFiles() {
  console.log(`${colors.blue}üîç V√©rification des fichiers middleware...${colors.reset}`);
  
  const middlewareFiles = [
    path.join(process.cwd(), 'middleware.js'),
    path.join(process.cwd(), 'middleware.ts'),
    path.join(process.cwd(), 'src', 'middleware.js'),
    path.join(process.cwd(), 'src', 'middleware.ts')
  ];
  
  const existingFiles = middlewareFiles.filter(file => fs.existsSync(file));
  
  if (existingFiles.length > 1) {
    console.error(`${colors.red}‚ùå Plusieurs fichiers middleware d√©tect√©s:${colors.reset}`);
    existingFiles.forEach(file => console.log(`  - ${file}`));
    console.error(`${colors.red}   Cela peut causer des conflits de routage. Gardez uniquement un fichier middleware.${colors.reset}`);
    hasErrors = true;
  } else if (existingFiles.length === 0) {
    console.warn(`${colors.yellow}‚ö†Ô∏è Aucun fichier middleware trouv√©. L'authentification peut ne pas fonctionner correctement.${colors.reset}`);
    warnings++;
  } else {
    console.log(`${colors.green}‚úÖ Un seul fichier middleware trouv√©: ${existingFiles[0]}${colors.reset}`);
  }
}

// V√©rifier la configuration Next.js
function checkNextConfig() {
  console.log(`${colors.blue}üîç V√©rification de next.config.js...${colors.reset}`);
  
  const nextConfigPath = path.join(process.cwd(), 'next.config.js');
  
  if (!fs.existsSync(nextConfigPath)) {
    console.error(`${colors.red}‚ùå Fichier next.config.js introuvable.${colors.reset}`);
    hasErrors = true;
    return;
  }
  
  const content = fs.readFileSync(nextConfigPath, 'utf8');
  
  // V√©rifier s'il y a des marqueurs de conflit Git
  if (content.includes('<<<<<<<') || content.includes('>>>>>>>') || content.includes('=======')) {
    console.error(`${colors.red}‚ùå Marqueurs de conflit Git d√©tect√©s dans next.config.js${colors.reset}`);
    hasErrors = true;
  } else {
    console.log(`${colors.green}‚úÖ Pas de conflit Git dans next.config.js${colors.reset}`);
  }
  
  // V√©rifier si la configuration webpack est pr√©sente
  if (!content.includes('webpack')) {
    console.warn(`${colors.yellow}‚ö†Ô∏è Configuration webpack manquante dans next.config.js${colors.reset}`);
    warnings++;
  } else {
    console.log(`${colors.green}‚úÖ Configuration webpack pr√©sente${colors.reset}`);
  }
  
  // V√©rifier si la configuration d'images est correcte
  if (!content.includes('images') || !content.includes('domains')) {
    console.warn(`${colors.yellow}‚ö†Ô∏è Configuration d'images potentiellement incorrecte dans next.config.js${colors.reset}`);
    warnings++;
  } else {
    console.log(`${colors.green}‚úÖ Configuration d'images pr√©sente${colors.reset}`);
  }
}

// V√©rifier les conflits Git dans les fichiers source
function checkGitConflicts() {
  console.log(`${colors.blue}üîç Recherche de conflits Git...${colors.reset}`);
  
  try {
    // Rechercher dans tous les fichiers .js, .jsx, .ts, .tsx et .json
    const command = "grep -r '<<<<<<<\\|=======\\|>>>>>>>' --include='*.js' --include='*.jsx' --include='*.ts' --include='*.tsx' --include='*.json' . | grep -v 'node_modules\\|.next' || echo 'No conflicts found'";
    const result = execSync(command, { shell: true }).toString();
    
    if (result.trim() !== 'No conflicts found') {
      console.error(`${colors.red}‚ùå Marqueurs de conflit Git d√©tect√©s:${colors.reset}`);
      console.error(result);
      hasErrors = true;
    } else {
      console.log(`${colors.green}‚úÖ Pas de conflit Git d√©tect√©${colors.reset}`);
    }
  } catch (error) {
    console.warn(`${colors.yellow}‚ö†Ô∏è Impossible de v√©rifier les conflits Git: ${error.message}${colors.reset}`);
    warnings++;
  }
}

// V√©rifier si les fichiers Supabase sont correctement configur√©s
function checkSupabaseFiles() {
  console.log(`${colors.blue}üîç V√©rification de la configuration Supabase...${colors.reset}`);
  
  const supabaseClientPaths = [
    path.join(process.cwd(), 'src', 'lib', 'supabase', 'client.js'),
    path.join(process.cwd(), 'src', 'lib', 'supabase', 'client.ts'),
    path.join(process.cwd(), 'src', 'lib', 'supabase.js'),
    path.join(process.cwd(), 'src', 'lib', 'supabase.ts')
  ];
  
  const existingFiles = supabaseClientPaths.filter(file => fs.existsSync(file));
  
  if (existingFiles.length === 0) {
    console.error(`${colors.red}‚ùå Aucun fichier client Supabase trouv√©. L'authentification ne fonctionnera pas.${colors.reset}`);
    hasErrors = true;
    return;
  }
  
  // V√©rifier si chaque fichier client contient une gestion d'erreur
  let hasErrorHandling = false;
  
  for (const file of existingFiles) {
    const content = fs.readFileSync(file, 'utf8');
    
    if (content.includes('try') && content.includes('catch')) {
      hasErrorHandling = true;
      break;
    }
  }
  
  if (!hasErrorHandling) {
    console.warn(`${colors.yellow}‚ö†Ô∏è Les fichiers client Supabase ne semblent pas avoir de gestion d'erreur robuste${colors.reset}`);
    warnings++;
  } else {
    console.log(`${colors.green}‚úÖ Gestion d'erreur Supabase d√©tect√©e${colors.reset}`);
  }
}

// Ex√©cuter toutes les v√©rifications
function runAllChecks() {
  checkEnvironmentVariables();
  checkMiddlewareFiles();
  checkNextConfig();
  checkGitConflicts();
  checkSupabaseFiles();
  
  console.log('\n');
  
  if (hasErrors) {
    console.error(`${colors.red}‚ùå Des erreurs critiques ont √©t√© d√©tect√©es. Veuillez les corriger avant le d√©ploiement.${colors.reset}`);
    process.exit(1);
  } else if (warnings > 0) {
    console.warn(`${colors.yellow}‚ö†Ô∏è ${warnings} avertissements d√©tect√©s. Le d√©ploiement peut continuer mais pourrait rencontrer des probl√®mes.${colors.reset}`);
    process.exit(0); // Exit avec code 0 pour ne pas bloquer le d√©ploiement
  } else {
    console.log(`${colors.green}‚úÖ Toutes les v√©rifications ont r√©ussi. Pr√™t pour le d√©ploiement.${colors.reset}`);
    process.exit(0);
  }
}

// Ex√©cuter toutes les v√©rifications
runAllChecks(); 